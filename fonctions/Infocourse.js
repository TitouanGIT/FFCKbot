const { TextInputBuilder,
        ActionRowBuilder,
        ModalBuilder,
        StringSelectMenuBuilder, 
} = require('discord.js');

const createCourse = require('./createCourse');
const courses = {};

module.exports = {
  data: {
      name: 'infocourse',
      description: 'Information pour la cr√©ation de la course',
  },
  async execute(interaction) {
    let courseName = "";
    let date = "";
    let respName = "";

    const selectDiscipline = new StringSelectMenuBuilder()
          .setCustomId('selectDiscipline')
          .setPlaceholder('üö£‚Äç‚ôÇÔ∏èS√©lectionner une disciplineüö£‚Äç‚ôÇÔ∏è')
          .addOptions([
            { label: 'üñáSlalomüñá', value: 'slalom' },
            { label: 'üëäKayak crossüëä', value: 'xtrem' },
            { label: '‚ûñCourse en ligne‚ûñ', value: 'course_en_ligne' },
            { label: 'üèêKayak Poloüèê', value: 'kayak_polo' },
            { label: '‚ÜòÔ∏èDescente‚ÜòÔ∏è', value: 'descente' },
            { label: 'üêâDragon boatüêâ', value: 'dragon_boat' },
            { label: 'üåÄFreestyleüåÄ', value: 'freestyle' },
            { label: '‚ôøÔ∏èParacano√´‚ôøÔ∏è', value: 'paracano√´' },
            { label: 'üåäOc√©an racingüåä', value: 'ocean_racing' },
            { label: 'üìèMarathonüìè', value: 'marathon' },
            { label: 'üõ∂Raftüõ∂', value: 'raft' },
            { label: 'üèÑWaveski surfingüèÑ', value: 'waveski_surfing' },
            { label: 'ìÄåStand up paddleìÄå', value: 'stand_up_paddle' },
            { label: 'üèäNatation en eau viveüèä', value: 'swimming' },
          ]);

    const modalCourse = new ModalBuilder()
      .setCustomId('courseModal')
      .setTitle('Information pour la cr√©ation de la course')
      .addComponents(
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('nameInput')
            .setLabel('üèÅNom de la course (Lieu, Type)üèÅ')
            .setStyle('Short')
        ),
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('dateInput')
            .setLabel('üìÖDate de la course ( xx/xx/xxxx )üìÖ')
            .setStyle('Short')
        ),
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('nameRespInput')
            .setLabel('Nom du responsable de la course')
            .setStyle('Short')
        ),
      );

      const selectRow = new ActionRowBuilder().addComponents(selectDiscipline);
      const courseFilter = i => i.user.id === interaction.user.id;
      const courseCollector = interaction.channel.createMessageComponentCollector({ filter: courseFilter});
      const selectDisciplineFilter = i => i.user.id === interaction.user.id && i.customId === 'selectDiscipline';
      const selectDisciplineCollector = interaction.channel.createMessageComponentCollector({ filter: selectDisciplineFilter });

      courseCollector.on('collect', async i => {
        if (!i.isButton()) return;
      
        if (i.customId === 'buttoncourse') {
          await i.showModal(modalCourse);
          const modalSubmit = await i.awaitModalSubmit({ filter: courseFilter, time: 2147483646 });
          if (modalSubmit.customId === 'courseModal') {
            courseName = modalSubmit.fields.getTextInputValue('nameInput');
            date = modalSubmit.fields.getTextInputValue('dateInput');
            respName = modalSubmit.fields.getTextInputValue('nameRespInput');
            const interactname = i.user;
            console.log(`Cr√©ation de la course ${courseName} par ${interactname.username}#${interactname.discriminator}`);
          }
          await modalSubmit.reply({ content: '‚¨áÔ∏èS√©lectionner une discipline‚¨áÔ∏è', components: [selectRow], ephemeral: true });
          const selectDisciplineCollector = interaction.channel.createMessageComponentCollector({ filter: selectDisciplineFilter });
          selectDisciplineCollector.on('collect', async (i) => {
  
            if (!i.isStringSelectMenu()) return;
            const discipline = i.values[0];
    
            await modalSubmit.editReply({
              content: `Cr√©ation de la course ${courseName}...`,
              ephemeral: true,
              components: []
            });
            
            courses[courseName] = { interaction, discipline, courseName, date, respName };
            await createCourse.execute(courses, interaction, discipline, courseName, date, respName);
            await modalSubmit.editReply({
              content: `La course ${courseName} du ${date}, organis√© par ${respName} a √©tais cr√©√© avec succ√©e!`,
              ephemeral: true
            });
            console.log(modalCourse); 
            selectDisciplineCollector.stop();
        });
        selectDisciplineCollector.on("end", async () => {
          console.log("fin de la cr√©ation de la course");
        });
        }
      });
}
}